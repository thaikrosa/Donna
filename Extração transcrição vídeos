# ===================================================================
# C√ìDIGO PARA EXTRAIR TRANSCRI√á√ïES DO YOUTUBE AUTOMATICAMENTE
# Para usar no Google Colab (colab.research.google.com)
# ===================================================================

# PASSO 1: INSTALAR BIBLIOTECAS NECESS√ÅRIAS
# Execute esta c√©lula primeiro (aperte Shift + Enter)
!pip install youtube-transcript-api
!pip install pandas
!pip install openpyxl

# ===================================================================
# PASSO 2: IMPORTAR BIBLIOTECAS E CONFIGURAR
# ===================================================================
import pandas as pd
from youtube_transcript_api import YouTubeTranscriptApi
import re
from datetime import datetime
import os

print("‚úÖ Bibliotecas carregadas com sucesso!")
print("Agora voc√™ pode extrair transcri√ß√µes do YouTube automaticamente")

# ===================================================================
# PASSO 3: FUN√á√ÉO PARA EXTRAIR ID DO V√çDEO DO YOUTUBE
# ===================================================================
def extrair_id_video(url):
    """
    Extrai o ID do v√≠deo a partir de uma URL do YouTube
    Funciona com v√°rios formatos de URL
    """
    padroes = [
        r'(?:v=|\/)([0-9A-Za-z_-]{11}).*',
        r'youtu\.be\/([0-9A-Za-z_-]{11})',
        r'embed\/([0-9A-Za-z_-]{11})'
    ]
    for padrao in padroes:
        match = re.search(padrao, url)
        if match:
            return match.group(1)
    return None

# ===================================================================
# PASSO 4: FUN√á√ÉO PRINCIPAL PARA EXTRAIR TRANSCRI√á√ÉO
# ===================================================================
def extrair_transcricao_youtube(url_video, idioma='pt'):
    """
    Extrai a transcri√ß√£o de um v√≠deo do YouTube

    Par√¢metros:
    - url_video: Link completo do v√≠deo do YouTube
    - idioma: 'pt' para portugu√™s, 'en' para ingl√™s

    Retorna:
    Texto completo da transcri√ß√£o
    """
    try:
        # Extrair ID do v√≠deo
        video_id = extrair_id_video(url_video)
        if not video_id:
            return "‚ùå Erro: URL inv√°lida"

        # Tentar obter transcri√ß√£o em m√∫ltiplos idiomas
        idiomas_tentar = ['pt', 'pt-BR', 'en'] if idioma == 'pt' else ['en', 'pt', 'pt-BR']
        transcript = None
        idioma_usado = None
        for lang in idiomas_tentar:
            try:
                transcript = YouTubeTranscriptApi.get_transcript(video_id, languages=[lang])
                idioma_usado = lang
                break
            except:
                continue

        if transcript is None:
            # Tentar listar idiomas dispon√≠veis
            try:
                transcript_list = YouTubeTranscriptApi.list_transcripts(video_id)
                idiomas_disponiveis = []
                for t in transcript_list:
                    idiomas_disponiveis.append(t.language_code)
                return f"‚ùå Erro: Nenhuma transcri√ß√£o encontrada nos idiomas tentados.\nIdiomas dispon√≠veis: {', '.join(idiomas_disponiveis)}"
            except:
                return "‚ùå Erro: N√£o foi poss√≠vel obter transcri√ß√£o para este v√≠deo"


        # Juntar todo o texto
        texto_completo = " ".join([item['text'] for item in transcript])

        # Limpar texto (remover quebras de linha desnecess√°rias)
        texto_limpo = re.sub(r'\s+', ' ', texto_completo).strip()

        print(f"‚úÖ Transcri√ß√£o extra√≠da com sucesso!")
        print(f" üåê Idioma usado: {idioma_usado}")
        print(f" üìä Caracteres: {len(texto_limpo)}")
        print(f" üìä Palavras: {len(texto_limpo.split())}")

        return texto_limpo

    except Exception as e:
        error_msg = f"‚ùå Erro ao extrair transcri√ß√£o: {str(e)}"
        print(error_msg)
        return error_msg


# ===================================================================
# PASSO 5: FUN√á√ÉO PARA PROCESSAR M√öLTIPLOS V√çDEOS
# ===================================================================
def processar_lista_videos(lista_urls, nomes_videos=None):
    """
    Processa uma lista de URLs e extrai todas as transcri√ß√µes

    Par√¢metros:
    - lista_urls: Lista com URLs dos v√≠deos
    - nomes_videos: Lista com nomes descritivos (opcional)

    Retorna:
    DataFrame com os resultados
    """
    resultados = []
    if nomes_videos is None:
        nomes_videos = [f"V√≠deo {i+1}" for i in range(len(lista_urls))]

    print(f"üöÄ Iniciando processamento de {len(lista_urls)} v√≠deos...")
    print("=" * 60)

    for i, (url, nome) in enumerate(zip(lista_urls, nomes_videos)):
        print(f"\nüìπ Processando {i+1}/{len(lista_urls)}: {nome}")
        print(f"üîó URL: {url}")
        transcricao = extrair_transcricao_youtube(url)

        # Adicionar aos resultados
        resultado = {
            'NOME_VIDEO': nome,
            'URL': url,
            'TRANSCRICAO': transcricao,
            'DATA_EXTRACAO': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            'STATUS': '‚úÖ Sucesso' if not transcricao.startswith('‚ùå') else '‚ùå Erro'
        }
        resultados.append(resultado)

    # Criar DataFrame
    df = pd.DataFrame(resultados)

    print("\n" + "=" * 60)
    print(f"üéâ Processamento conclu√≠do!")
    print(f"‚úÖ Sucessos: {len(df[df['STATUS'] == '‚úÖ Sucesso'])}")
    print(f"‚ùå Erros: {len(df[df['STATUS'] == '‚ùå Erro'])}")

    return df

# ===================================================================
# PASSO 6: FUN√á√ÉO PARA SALVAR EM EXCEL
# ===================================================================
def salvar_em_excel(dataframe, nome_arquivo='transcricoes_youtube.xlsx'):
    """
    Salva o DataFrame em um arquivo Excel
    """
    try:
        dataframe.to_excel(nome_arquivo, index=False, engine='openpyxl')
        print(f"üíæ Arquivo salvo como: {nome_arquivo}")
        print(f"üìÅ Para baixar: clique em 'Arquivos' (pasta) no menu lateral esquerdo")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao salvar: {e}")
        return False


# ===================================================================
# EXEMPLO DE USO - COLE SEUS V√çDEOS AQUI!
# ===================================================================

# CONFIGURA√á√ÉO: ADICIONE SEUS V√çDEOS AQUI
videos_para_processar = [
    "https://www.youtube.com/watch?v=EXEMPLO1", # Substitua pelos seus links
    "https://www.youtube.com/watch?v=EXEMPLO2", # Substitua pelos seus links
    # Adicione quantos quiser...
]

# NOMES DESCRITIVOS (opcional)
nomes_dos_videos = [
    "Rossandro Klinjey - Burnout Materno", # Mude para os nomes reais
    "M√£e Crist√£ - Lidando com Culpa",     # Mude para os nomes reais
    # Adicione os nomes correspondentes...
]


# ===================================================================
# EXECUTAR O PROCESSAMENTO
# ===================================================================
def executar_extracao():
    """
    Fun√ß√£o principal para executar todo o processo
    """
    print("üé¨ EXTRATOR AUTOM√ÅTICO DE TRANSCRI√á√ïES YOUTUBE")
    print("=" * 60)

    # Verificar se h√° v√≠deos configurados
    if not videos_para_processar or videos_para_processar[0] == "https://www.youtube.com/watch?v=EXEMPLO1":
        print("‚ö†Ô∏è ATEN√á√ÉO: Configure seus v√≠deos primeiro!")
        print(" Edite a lista 'videos_para_processar' com os links reais")
        return

    # Processar v√≠deos
    df_resultados = processar_lista_videos(videos_para_processar, nomes_dos_videos)

    # Mostrar preview dos resultados
    print("\nüìã PREVIEW DOS RESULTADOS:")
    print("=" * 60)
    for index, row in df_resultados.iterrows():
        print(f"üé• {row['NOME_VIDEO']}")
        print(f" Status: {row['STATUS']}")
        if row['STATUS'] == '‚úÖ Sucesso':
            preview = row['TRANSCRICAO'][:200] + "..." if len(row['TRANSCRICAO']) > 200 else row['TRANSCRICAO']
            print(f" Preview: {preview}")
        print()

    # Salvar em Excel
    print("üíæ Salvando resultados...")
    salvar_em_excel(df_resultados)

    return df_resultados


# ===================================================================
# FUN√á√ÉO DE TESTE R√ÅPIDO (para testar com 1 v√≠deo)
# ===================================================================
def testar_um_video(url, nome="Teste"):
    """
    Fun√ß√£o para testar rapidamente com apenas um v√≠deo
    """
    print(f"üß™ TESTE R√ÅPIDO - {nome}")
    print("=" * 40)

    transcricao = extrair_transcricao_youtube(url)

    if not transcricao.startswith('‚ùå'):
        print(f"\nüìù PREVIEW DA TRANSCRI√á√ÉO:")
        print("-" * 40)
        preview = transcricao[:500] + "..." if len(transcricao) > 500 else transcricao
        print(preview)

        # Salvar teste
        df_teste = pd.DataFrame([{
            'NOME_VIDEO': nome,
            'URL': url,
            'TRANSCRICAO': transcricao,
            'DATA_EXTRACAO': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            'STATUS': '‚úÖ Sucesso'
        }])
        salvar_em_excel(df_teste, f'teste_{nome.lower().replace(" ", "_")}.xlsx')

    return transcricao

print("\nüéâ C√ìDIGO PRONTO! COMO USAR:")
print("=" * 50)
print("1Ô∏è‚É£ Para TESTE R√ÅPIDO (1 v√≠deo):")
print(" testar_um_video('SEU_LINK_AQUI', 'Nome do V√≠deo')")
print("\n2Ô∏è‚É£ Para PROCESSAR V√ÅRIOS:")
print(" 1. Edite a lista 'videos_para_processar'")
print(" 2. Execute: executar_extracao()")
print("\n3Ô∏è‚É£ BAIXAR ARQUIVO:")
print(" Clique na pasta üìÅ no menu lateral esquerdo")
print("=" * 50)

# ===================================================================
# EXEMPLO DE EXECU√á√ÉO (descomente as linhas abaixo para testar)
# ===================================================================

# TESTE R√ÅPIDO:
# resultado = testar_um_video("https://www.youtube.com/watch?v=SEU_LINK", "Teste R√°pido")

# PROCESSAMENTO COMPLETO:
# df_final = executar_extracao()
